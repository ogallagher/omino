{
	"insert_language": {
		"external": false,
		"params": [
			"code",
			"name"
		],
		"query": "insert ignore into `languages`(`code`,`english_name`) values ({code},{name})",
		"notes": "insert ignore fails quietly if the language is already in the db"
	},
	"insert_string": {
		"external": true,
		"params": [
			"language",
			"value",
			"timestamp_ms"
		],
		"query": "insert into `strings`(`language`,`value`,`last_updated`) values ({language},{value},{timestamp_ms})"
	},
	"insert_definition": {
		"external": true,
		"params": [
			"value",
			"language",
			"timestamp_ms"
		],
		"query": "call insert_definition_by_value({value},{language},{timestamp_ms})"
	},
	"insert_rel_definition": {
		"external": true,
		"params": [
			"entry_val",
			"entry_lang",
			"def_val",
			"def_lang"
		],
		"query": "call insert_rel_definition_by_value({entry_val},{entry_lang},{def_val},{def_lang})",
		"notes": "assumes both entry and definition already exist in strings"
	},
	"insert_letter": {
		"external": true,
		"params": [
			"value",
			"timestamp_ms",
			"letter_type"
		],
		"query": "call insert_letter_by_value({value},{timestamp_ms},{letter_type})"
	},
	"insert_root": {
		"external": true,
		"params": [
			"value",
			"timestamp_ms",
			"root_type"
		],
		"query": "call insert_root_by_value({value},{timestamp_ms},{root_type})"
	},
	"insert_omino_word": {
		"external": true,
		"params": [
			"value",
			"timestamp_ms"
		],
		"query": "call insert_omino_word_by_value({value},{timestamp_ms})"
	},
	"insert_example": {
		"external": true,
		"params": [
			"value",
			"language",
			"timestamp_ms",
			"correct"
		],
		"query": "call insert_example_by_value({value},{language},{timestamp_ms},{correct})"
	},
	"insert_rel_example": {
		"external": true,
		"params": [
			"entry_val",
			"entry_lang",
			"ex_val",
			"ex_lang"
		],
		"query": "call insert_rel_example_by_value({entry_val},{entry_lang},{ex_val},{ex_lang})",
		"notes": "assumes both entry and example already exist in strings"
	},
	"insert_homophones": {
		"external": false,
		"params": [
			"one_val",
			"one_lang",
			"two_val",
			"two_lang"
		],
		"query": "call insert_homophones_by_value({one_val},{one_lang},{two_val},{two_lang})",
		"notes": "assumes both one and two already exist in strings"
	},
	"fetch_string": {
		"external": true,
		"params": [
			"value",
			"language"
		],
		"query": "select * from `strings` where `value`={value} and `language`={language}"
	},
	"fetch_definitions": {
		"external": true,
		"params": [
			"value",
			"language"
		],
		"query": "call fetch_definitions({value},{language})",
		"notes": "searches definitions by value (and optionally language) for either entry or definition.",
		"returns": ["in_id","in_lang","in_val","out_id","out_lang","out_val"]
	},
	"fetch_definitions_by_id": {
		"external": true,
		"params": [
			"id"
		],
		"query": "select `def_id`,`value`,`language` from `rel_definitions` d inner join (select `id` as def_id, `value`, `language` from `strings`) s on d.`definition`=s.def_id where d.`entry`={id} union select `def_id`,`value`,`language` from `rel_definitions` d inner join (select `id` as def_id, `value`, `language` from `strings`) s on d.`entry`=s.def_id where d.`definition`={id}",
		"notes": "searches definitions by id for entry or definition",
		"returns": ["def_id","value","language"]
	},
	"fetch_translated_examples_by_id": {
		"external": true,
		"params": [
			"id"
		],
		"query": "call fetch_translated_examples({id})",
		"notes": "searches examples by entry id",
		"returns": ["ex_id","ex_val","ex_lang","tl_id","tl_val","tl_lang"]
	}
}
